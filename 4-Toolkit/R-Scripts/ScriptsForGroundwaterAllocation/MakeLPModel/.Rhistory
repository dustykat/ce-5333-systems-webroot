jacob <- function(x_vector){
jacob <- matrix(0,nrow=2,ncol=2)
jacob[1,1] <- 2*x_vector[1]   ; jacob[1,2] <- 2*x_vector[2];
jacob[2,1] <- exp(x_vector[1]); jacob[2,2] <- 1 ;
return(jacob)
}
x_guess <- c(-1.83,0.8)
tolerancef <- 1e-9  # stop if function gets to zero
tolerancex <- 1e-9  # stop if solution not changing
maxiter <- 1 # stop if too many iterations
x_now <- x_guess
for (iter in 1:maxiter){
funcNow <- func(x_now)
testf <- t(funcNow) %*% funcNow
if(testf < tolerancef){
message("f(x) is close to zero : ", testf);
break
}
dx <- solve(jacob(x_now),funcNow)
testx <- t(dx) %*% dx
if(testx < tolerancex){
message("solution change small : ", testx);
break
}
x_now <- x_now - dx
}
print(func(x_guess))
print(jacob(x_guess))
print(dx)
print(func(x_now))
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/NewtonRaphsonAnalytical.R')
# R script for system of non-linear equations using Newton-Raphson with analytical derivatives
# forward define the functions
####### f(x) #########################
func <- function(x_vector){
func <- numeric(0)
func[1] <- x_vector[1]^2 + x_vector[2]^2 - 4
func[2] <- exp(x_vector[1]) + x_vector[2] - 1
return(func)
}
######## J(x) #########################
jacob <- function(x_vector,func){  #supply a vector and the function name
# the columns of the jacobian are directional derivatives
dv <- 1e-06 #perturbation value for finite difference
df1 <- numeric(0);
df2 <- numeric(0);
dxv <- x_vector;
dyv <- x_vector;
# perturb the vactors
dxv[1] <- dxv[1]+dv;
dyv[2] <- dyv[2]+dv;
df1 <- (func(dxv) - func(x_vector))/dv;
df2 <- (func(dyv) - func(x_vector))/dv;
jacob <- matrix(0,nrow=2,ncol=2)
# for a more general case should put this into a loop
jacob[1,1] <- df1[1]   ;  jacob[1,2] <- df2[1]  ;
jacob[2,1] <- df1[2]   ;  jacob[2,2] <- df2[2]  ;
return(jacob)
}
####### Solver Parameters #############
x_guess <- c(2.,-0.8)
tolerancef <- 1e-9  # stop if function gets to zero
tolerancex <- 1e-9  # stop if solution not changing
maxiter <- 20 # stop if too many iterations
x_now <- x_guess
###### Newton-Raphson Algorithm ########
for (iter in 1:maxiter){
funcNow <- func(x_now)
testf <- t(funcNow) %*% funcNow
if(testf < tolerancef){
message("f(x) is close to zero : ", testf);
break
}
dx <- solve(jacob(x_now),funcNow)
testx <- t(dx) %*% dx
if(testx < tolerancex){
message("solution change small : ", testx);
break
}
x_now <- x_now - dx
}
#########################################
if( iter == maxiter) {message("Maximum iterations -- check if solution is converging : ")}
message("Initial Guess"); print(x_guess);
message("Initial Function Value: "); print(func(x_guess));
message("Exit Function Value : ");print(func(x_now));
message("Exit Vector : "); print(x_now)
# R script for system of non-linear equations using Newton-Raphson with analytical derivatives
# forward define the functions
####### f(x) #########################
func <- function(x_vector){
func <- numeric(0)
func[1] <- x_vector[1]^2 + x_vector[2]^2 - 4
func[2] <- exp(x_vector[1]) + x_vector[2] - 1
return(func)
}
######## J(x) #########################
jacob <- function(x_vector,func){  #supply a vector and the function name
# the columns of the jacobian are directional derivatives
dv <- 1e-06 #perturbation value for finite difference
df1 <- numeric(0);
df2 <- numeric(0);
dxv <- x_vector;
dyv <- x_vector;
# perturb the vactors
dxv[1] <- dxv[1]+dv;
dyv[2] <- dyv[2]+dv;
df1 <- (func(dxv) - func(x_vector))/dv;
df2 <- (func(dyv) - func(x_vector))/dv;
jacob <- matrix(0,nrow=2,ncol=2)
# for a more general case should put this into a loop
jacob[1,1] <- df1[1]   ;  jacob[1,2] <- df2[1]  ;
jacob[2,1] <- df1[2]   ;  jacob[2,2] <- df2[2]  ;
return(jacob)
}
####### Solver Parameters #############
x_guess <- c(2.,-0.8)
tolerancef <- 1e-9  # stop if function gets to zero
tolerancex <- 1e-9  # stop if solution not changing
maxiter <- 20 # stop if too many iterations
x_now <- x_guess
###### Newton-Raphson Algorithm ########
for (iter in 1:maxiter){
funcNow <- func(x_now)
testf <- t(funcNow) %*% funcNow
if(testf < tolerancef){
message("f(x) is close to zero : ", testf);
break
}
dx <- solve(jacob(x_now,func),funcNow)
testx <- t(dx) %*% dx
if(testx < tolerancex){
message("solution change small : ", testx);
break
}
x_now <- x_now - dx
}
#########################################
if( iter == maxiter) {message("Maximum iterations -- check if solution is converging : ")}
message("Initial Guess"); print(x_guess);
message("Initial Function Value: "); print(func(x_guess));
message("Exit Function Value : ");print(func(x_now));
message("Exit Vector : "); print(x_now)
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/QuasiNewtonRaphson.R')
source('~/Dropbox/1-CE-TTU-Classes/CE4333-PCH-R/3-Readings/PCHinR-LectureNotes/7-NewtonRaphson/RScripts/QuasiNewtonRaphson.R')
############### Some R Commands ########################
x <- c(0 ,1 ,2 ,3 ,4 ,5) # create a vector of 6 elements -- integers 0 to 5.
y <- x*x # square x, put result in y.
plot (x,y, xlab =" X_Axis ", ylab ="Y- Axis (X- squared )", lwd =3, type ="l") # make and label a plot
ls()
rm(list=ls())
ls()
############### Some R Commands ########################
x <- c(0 ,1 ,2 ,3 ,4 ,5) # create a vector of 6 elements -- integers 0 to 5.
y <- x*x # square x, put result in y.
plot (x,y, xlab =" X_Axis ", ylab ="Y- Axis (X- squared )", lwd =3, type ="l") # make and label a plot
############### Some R Commands ########################
x <- c(0 ,1 ,2 ,3 ,4 ,5) # create a vector of 6 elements -- integers 0 to 5.
y <- x*x # square x, put result in y.
plot (x,y, xlab =" X_Axis ", ylab ="Y- Axis (X- squared )", lwd =3, type ="l") # make and label a plot
source('~/Desktop/R-scripts-in-class/MyFirstScript.R')
source('~/Desktop/R-scripts-in-class/MyFirstScript.R')
rm(list=ls())
interpolate2pairs <- function (xstar ,x1 ,y1 ,x2 ,y2){
# apply interpolation equation
# does not trap errors ( divide by zero , etc )
ystar <- y1 + (y2 -y1)*( xstar -x1)/(x2 -x1)
return ( ystar )
}
ls()
interpolate2pairs(44,40,992,50,988)
source('~/Desktop/R-scripts-in-class/InterpolatePairs.R')
source('~/Desktop/R-scripts-in-class/InterpolatePairs.R')
# Script to return water density in SI units as a function of temperature
getDensitySI <- function (t){
# load the getAvalue () function ###################################################
getAvalue <- function (x, xvector , yvector ){
# returns a y value for x interpolated from ( xvector , yvector )
# NULL return is error indicator
#
xvlength <- length ( xvector )
yvlength <- length ( yvector )
# check that vector lengths same
if( xvlength != yvlength ){
message (" vectors xvector and yvector different lengths -- exiting function ")
return ()
}
# check that x in range xvector
if(x < min ( xvector )){
message (" x too small -- exiting function ")
return ()
}
if(x > max ( xvector )){
message (" x too big -- exiting function ")
return ()
}
#
for (i in 1:( xvlength -1) ){
if( (x >= xvector [i]) & (x < xvector [i +1]) ){
result = yvector [i ]+( yvector [i+1] - yvector [i]) *(x - xvector [i])/
( xvector [i+1] - xvector [i])
return ( result )
}
# next row
}
# check if at endpoint
if( (x >= xvector [ xvlength -1]) & (x <= xvector [ xvlength ]) ){
result = yvector [i ]+( yvector [i+1] - yvector [i]) *(x - xvector [i])/
( xvector [i+1] - xvector [i])
return ( result )
}
# should never get to next line
message (" something is really wrong -- check the vectors !")
return ()
}
# load the data vectors , tempSI and densitySI
tempSI <-c (0.00 ,5.00 ,10.00 ,15.00 ,20.00 ,25.00 ,30.00 ,35.00 ,
40.00 ,50.00 ,60.00 ,70.00 ,80.00 ,90.00 ,100.00)
##############################################
densitySI <-c (1000.00 ,1000.00 ,1000.00 ,999.00 ,998.00 ,997.00 ,996.00 ,
994.00 ,992.00 ,988.00 ,983.00 ,978.00 ,972.00 ,965.00 ,958.00)
# now call getAValue
result <- getAvalue (t,tempSI , densitySI )
return ( result )
}
ls()
getDensitySI(40)
getDensitySI(46)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
getDensitySI(50)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
getDensitySI(50)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
getDensitySI(50)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
getDensitySI(50)
getDensityUS(50)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
source('~/Desktop/R-scripts-in-class/GetDensity.R')
getDensityUS(50)
getDensitySI(50)
getDensityUS(50)
getDensitySI(50)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
getDensitySI(50)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
source('~/Desktop/R-scripts-in-class/GetDensity.R')
getDensitySI(50)
getDensityUS(50)
source('~/Desktop/R-scripts-in-class/GetDensity.R')
source('~/Desktop/R-scripts-in-class/BubbleSort.R')
help(sort)
## A larger test
x <- rnorm(1e7)
system.time(x1 <- sort(x, method = "shell"))
system.time(x2 <- sort(x, method = "quick"))
stopifnot(identical(x1, x2))
## End(Not run)
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
help(message)
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
source('~/Desktop/R-scripts-in-class/RectPanel.R')
help(for)
help(for)
source('~/Desktop/R-scripts-in-class/RectPanel.R')
y(3)
source('~/Desktop/R-scripts-in-class/Lecture07/NR-first.R')
source('~/Desktop/R-scripts-in-class/Lecture07/NR-first.R')
source('~/Desktop/R-scripts-in-class/Lecture07/NR-finite-difference-derivatives.R')
source('~/Desktop/R-scripts-in-class/Lecture07/NR-finite-difference-derivatives.R')
rm9list=ls())
rm(list-ls())
rm(list=ls())
rm()
source('~/Desktop/R-scripts-in-class/Lecture07/NR-finite-difference-derivatives.R')
source('~/Desktop/R-scripts-in-class/Lecture07/NR-finite-difference-derivatives.R')
rm(list=ls())
source('~/Desktop/R-scripts-in-class/Lecture07/NR-finite-difference-derivatives.R')
source('~/Desktop/R-scripts-in-class/Lecture07/NR-finite-difference-derivatives.R')
source('~/Desktop/R-scripts-in-class/Lecture07/NR-Exercise7.1-2.R')
print("hello world")
cat("Content-type: text/html\n\n")
source('~/Desktop/R-CLI/hello.R')
100/25.4
200/25.4
2400/25.4
3600/25.4
1600/25.4
2000/25.4
1200/25.4
1600/25.4
rm(list=ls())
# functions for train problem
cFric <- function(reynolds){
cFric <- 0.523/(log(0.06*reynolds))^2
return(cFric)
}
rNum <- function(velocity,length,mu){
rNum <- velocity*length/mu
return(rNum)
}
shearF <- function(coef,area,rho,velocity){
shearF <- 0.5*coef*area*rho*velocity^2
return(shearF)
}
90000/3600
260000/3600
rNum(25,240,1.41e-5)
cFric(425531915)
shearF(0.001797943,(16*240),1.25,25)
2696.914*25
rNum(72.22,240,1.41e-5)
cFric(1229276596)
shearF(0.001593542,(16*240),1.25,72.22)
shearF(0.001593542,(16*240),1.25,72.22)*77.22
forceBouyant <- (1.25)*(0.0125^2)*pi*(0.25)*1000
forceBouyant
forceBouyant*9.8
9.8*3.227
forceBouyant
3.227/1000/forceBouyant
forceBouyant <- (1.25)*(0.125^2)*pi*(0.25)*1000*9.8
forceBouyant
forceBouyant/(9.8*1000)
pi*(0.2^2)/4
0.0283/(pi*(0.2^2)/4)
(0.900817^2)/(2*9.8)
53.58-50.45-0.0414
53.58+25.61
79.19-30.49-0.0414
b             gg g
(0.001*0.1)/(0.0025) + sqrt(2*9.8*1)
(0.001*0.2)/(0.0025) + 3.1*sqrt(2*9.8*10)
312/4
312/3
78*960+104*580-(312*290)
312-312/4
78*960+234*580-(312*290)
0.85*0.85*pi*0.25
=4/0.5674502
4/0.5674502
(8*0.011*300*4*4)/(pi*pi*9.8*(0.850^5))
24-9.842
=4*9800*14.15
4*9800*14.15
sqrt((8*20*9.8)/(2.2*pi*3.5*3.5*1.2))
install.packages(c("lpSolve", "lpSolveAPI"))
source('~/Desktop/MyRScript.R')
# Construction Management Model
#####################################
# R script set-up
# deallocate the workspace
rm(list=ls())
# load the linear programming library
library(lpSolve)
#####################################
# LP Set-up
# Define the Objective Function
obj.fun <- c(394, 1110)
# Define the constraint set
constr <- matrix(c(200, 1000, 200, 0, 0, 1000, 1, 1), ncol = 2, byrow=TRUE)
constr.dir <- c("<=", ">=", ">=", "<=")
rhs <- c(10000, 1600, 3000, 12)
######################################
# Solve the LP
construction.sol <- lp("min", obj.fun, constr, constr.dir, rhs, compute.sens = TRUE)
######################################
# Generate meaningful output
# Get some constants to make readable output
HowManyDecision <- length(construction.sol$solution)
message("Daily Operation Cost = $",construction.sol$objval) #objective function value
for (i in 1:HowManyDecision) {
message("Workers Assigned to Backhoe ",i," = ",construction.sol$solution[i])
}
#######################################
source('~/Desktop/MyRScript.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
interpolate2pairs(44,40,992,50,988)
source('~/Desktop/AnExample.R')
interpolate2pairs(44,40,992,50,988)
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/MyAllocate.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
3657.28-3374.55
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/AnExample.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/ChanceConstraint.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
source('~/Desktop/StochasticProgram.R')
setwd("~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel")
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
source('~/Desktop/GWExamples/ScriptsForGroundwaterAllocation/MakeLPModel/MakeLPModel.R')
